ðŸ”¹ How a 2D array is stored in memory

In C++ (and C), a 2D array is stored in row-major order, meaning:

Elements of a row are stored contiguously (one after another).

Then the next row starts, and so on.

So a 2D array like:

int a[3][4];


is stored in memory like this:

a[0][0], a[0][1], a[0][2], a[0][3],
a[1][0], a[1][1], a[1][2], a[1][3],
a[2][0], a[2][1], a[2][2], a[2][3]

ðŸ”¹ Address formula (Row-Major Order)

If:

Base = address of the first element (a[0][0])

i = row index

j = column index

N = number of columns (size of 2nd dimension)

w = size (in bytes) of each element (for int, usually 4 bytes)

ðŸ‘‰ Then the address of a[i][j] is:

Address(a[i][j]) = Base + (i * N + j) * w

âœ… Example

Letâ€™s say:

int a[3][4];   // 3 rows, 4 columns


Base = 1000 (assume address of a[0][0] is 1000)

Each int = 4 bytes (w = 4)

N = 4 (columns)

Find the address of a[2][3]:

Address(a[2][3]) = 1000 + (2 * 4 + 3) * 4
                 = 1000 + (8 + 3) * 4
                 = 1000 + 11 * 4
                 = 1000 + 44
                 = 1044


So a[2][3] is at address 1044.

ðŸ”¹ Column-Major Order (Fortran, MATLAB)

If the language uses column-major (not C/C++ but e.g. Fortran, MATLAB), the formula is:

Address(a[i][j]) = Base + (j * M + i) * w


Where:

M = number of rows.

This means it stores column by column instead of row by row.